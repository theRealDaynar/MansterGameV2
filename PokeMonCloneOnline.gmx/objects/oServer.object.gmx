<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>server = network_create_server(network_socket_tcp,7766,20)
enum msg_net
{
    first_connection = 0,
    chat_msg,
    key_state,
    battle_turn,
    battle_find
}
battle_queue = noone
clients = ds_map_create()

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///networking
switch(async_load[? "type"])
{
case network_type_connect: case network_type_non_blocking_connect:
if !async_load[? "succeeded"] exit
    var c = instance_create(0,0,oServerClient);
    c.socket = async_load[? "socket"]
    clients[? socket] = c
    var b_size = buffer_sizeof(buffer_u8) + buffer_sizeof(buffer_u16)
    var out_buff = buffer_create(b_size,buffer_fixed,1)
    buffer_write(out_buff,buffer_u8,msg_net.first_connection)
    buffer_write(out_buff,buffer_u16,c)
    network_send_packet(c.socket,out_buff,b_size)
    buffer_delete(out_buff)
break;
case network_type_disconnect:
    var dc_socket = async_load[? "socket"]
    with(clients[? dc_socket])
            instance_destroy()
    ds_map_delete(clients,dc_socket)
break;
case network_type_data:
    var data_socket = async_load[? "id"]
    var data_buff = async_load[? "buffer"]
        
    switch(buffer_read(data_buff,buffer_u8))
    {
    case msg_net.battle_find:
        var c = clients[? data_socket];
        ds_list_clear(c.team)
        repeat(4)
            ds_list_add(c.team,buffer_read(data_buff,buffer_u8))
        if battle_queue = noone
            battle_queue = c
        else
        {   
            c.partner = battle_queue
            battle_queue.partner = c
            var b_size = buffer_sizeof(buffer_u8) * 9 + buffer_sizeof(buffer_u16) * 2
            var out_buff = buffer_create(b_size,buffer_fixed,1)
            buffer_write(out_buff,buffer_u8,msg_net.battle_find)
            buffer_write(out_buff,buffer_u16,c)
            for(var i = 0; i &lt; 4; ++i)
                buffer_write(out_buff,buffer_u8,c.team[i])
            buffer_write(out_buff,buffer_u16,battle_queue)
            for(var i = 0; i &lt; 4; ++i)
                buffer_write(out_buff,buffer_u8,battle_queue.team[i])
            network_send_packet(c.socket,out_buff,b_size)
            network_send_packet(battle_queue.socket,out_buff,b_size)
            battle_queue = noone
            buffer_delete(out_buff)
        }
    break;
    case msg_net.battle_turn:
    }
break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
