<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>team1 = ds_list_create()
team2 = ds_list_create()
var y_section = room_height / 4
if !instance_exists(oClient)
for(var i = 0; i &lt; 4; ++i)
{
    var man = instance_create(110 + (i mod 2) * 50,y_section * i + 100,oBattleManster)
    with(man) ini_manster_base_stats(choose(0,1))
    man.team = team1
    ds_list_add(team1,man)
    
    man = instance_create(room_width - 110 - (i mod 2) * 50,y_section * i + 100,oBattleManster)
    with(man) ini_manster_base_stats(1)
    man.team = team2
    ds_list_add(team2,man)
}
user_team = team1
first_team = user_team

planning_phase = true
planning_manster = noone
display_menu = user_team[|0]
ui_base_color = c_navy
ui_text_color = c_white

execution_list = ds_list_create()


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///execute one iteration of the combat 'loop'
//return to planning phase
if ds_list_empty(execution_list)
{
    planning_phase = true
    with(oBattleManster)
    {
        stam += endurance
        if stam &gt; max_stam 
            stam = max_stam
    }
    exit
}
//have the first manster run it's code
with(execution_list[|0]) event_user(0)
//remove it from the list
ds_list_delete(execution_list,0)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Combat Settup
planning_phase = false

var current_team = first_team
if first_team = team1
    var second_team = team2
else
    var second_team = team1
for(var iii = 0; iii &lt; 2; ++iii)
{
if iii = 1
    current_team = second_team
for(var ii = 0; ii &lt; 4; ++ii)
with(current_team[|ii])
{
    if !dead
    {
        //show_debug_message(selected_ability)
        
        var priority = script_execute(selected_ability,3)
        var s = ds_list_size(other.execution_list)
        var i
        for(i = 0; i &lt; s; ++i)
        {
            var man_id = other.execution_list[|i]
            var other_priority = script_execute(man_id.selected_ability,3)
            if priority &gt; other_priority
            {
                ds_list_insert(other.execution_list,i,id)
                break
            }
            else if priority = other_priority
            {
                var other_true_spd = man_id.spd * man_id.spd_n / man_id.spd_d
                var true_spd = spd * spd_n / spd_d
                if true_spd &gt; other_true_spd
                {
                    ds_list_insert(other.execution_list,i,id)
                    break
                }
                else if true_spd = other_true_spd and random(1) &gt; .5
                {
                    ds_list_insert(other.execution_list,i,id)
                    break               
                }
            }
        }
        if i = s ds_list_add(other.execution_list,id)
    }
}
}
event_user(1)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if planning_phase
{
    var lmb = mouse_check_button_pressed(mb_left)
    
    //auto switch to next unready monster
    if planning_manster = noone
    {
        for(var i = 0; i &lt; ds_list_size(user_team); ++i)
        {
            if !user_team[|i].dead and user_team[|i].selected_ability = noone
            {
                planning_manster = user_team[|i]
                break
            }
        }
        tentative_ability = noone
    }
    //draw ui menu base
    var midx = room_width * .5
    var midy = room_height * .5
    var hwidth = 200
    var hheight = 100
    draw_roundrect_colour(midx - hwidth,midy - hheight,midx + hwidth,midy + hheight,ui_base_color,ui_base_color,false)
    draw_set_halign(fa_center)
    draw_set_valign(fa_center)
    //draw end turn button 
    if planning_manster = noone
    {
        draw_text_colour(midx,midy,"Ready",ui_text_color,ui_text_color,ui_text_color,ui_text_color,1)
        var sw = string_width("Ready") * .5
        var sh = string_height("Ready") * .5
        //player is ready
        if lmb and point_in_rectangle(mouse_x,mouse_y,midx - sw,midy - sh,midx + sw,midy + sh)
        {
            if instance_exists(oClient)
            {
                var out_buff = buffer_create((buffer_sizeof(buffer_u8)+buffer_sizeof(buffer_u16)) * 4,buffer_grow,1)
                buffer_write(out_buff,buffer_u8,msg_net.battle_turn)
                for(var i = 0; i &lt; 4 ++i)
                {
                    var cur_man = user_team[|i];
                    var ability = cur_man.selected_ability;
                    buffer_write(out_buff,buffer_u16,ability)
                    var a_map = script_execute(ability,2)
                    for(var ii = 0; ii &lt; a_map[? 'n']; ++ii)
                    {
                        var target = cur_man.targets[|ii]
                        var t_team = target.team
                        buffer_write(out_buff,buffer_u8,ds_list_find_index(t_team,target) + 4 * (t_team != user_team))
                    }
                    ds_map_destroy(a_map)
                }
                network_send_packet(oClient.client,out_buff,buffer_tell(out_buff))
                buffer_delete(out_buff)
            }
            else
            {
                //if not online do ai here and then begin combat phase
                var eteam
                if user_team = team1
                    eteam = team2
                else
                    eteam = team1
                for(var i = 0; i &lt; ds_list_size(eteam); ++i)
                {
                    ds_list_add(eteam[|i].targets,user_team[|irandom(3)])
                    eteam[|i].selected_ability = slap
                }
                event_user(0)
            }
        }
    }
    //draw ability options
    else if tentative_ability = noone
    {
        //draw text
        var hpadding = hwidth * .5
        var vpadding = hheight * .5
        for(var yy = 0; yy &lt; 2; ++yy)
        for(var xx = 0; xx &lt; 2; ++xx)
        {
            var ability_name = script_execute(planning_manster.ability[|xx + yy * 2],1);
            var xpos = midx - hpadding + hwidth * xx
            var ypos = midy - vpadding + hheight * yy
            draw_text_colour(xpos,ypos,ability_name,ui_text_color,ui_text_color,ui_text_color,ui_text_color,1)
            var sw = string_width(ability_name) * .5
            var sh = string_height(ability_name) * .5
            if lmb and point_in_rectangle(mouse_x,mouse_y,xpos - sw,ypos - sh,xpos + sw,ypos + sh)
            {
                tentative_ability = planning_manster.ability[|xx + yy * 2]
            }
        }
        //draw manster indicator
        with(planning_manster)
        {
            draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,1)

        }
    }
    //display selected target
    else
    {
        draw_text_colour(midx,midy,"Please select target(s)",ui_text_color,ui_text_color,ui_text_color,ui_text_color,1)
        var targeting_info = script_execute(tentative_ability,2)
        if ds_list_size(planning_manster.targets) &gt;= targeting_info[? "n"]
        {
            planning_manster.selected_ability = tentative_ability
            planning_manster = noone
        }
        else
        {
                for(var i = 0; i &lt; ds_list_size(planning_manster.targets); ++i)
        with(planing_manster.targets[|i])
        draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,1)
        }
        ds_map_destroy(targeting_info)
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
