<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oNetworkTest</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
ds_list_add(log,"Creating Client")
network_set_config(network_config_use_non_blocking_socket,true)
network_set_config(network_config_connect_timeout,10000)
client = network_create_socket(network_socket_tcp)
network_connect(client,"127.0.0.1",7766)
sid = noone

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(async_load[? "type"])
{
case network_type_connect: case network_type_non_blocking_connect:
ds_list_add(log,"Connected")
var out_buff = buffer_create(buffer_sizeof(buffer_u8)*5,buffer_fixed,1)
buffer_write(out_buff,buffer_u8,msg_net.first_connection)
network_send_packet(async_load[? "id"],out_buff,buffer_sizeof(buffer_u8)*5)
buffer_delete(out_buff)
break;
case network_type_data:
ds_list_add(log,"Recieving data")
var data_buff = async_load[? "buffer"]
    switch(buffer_read(data_buff,buffer_u8))
    {
    case msg_net.first_connection:
        sid = buffer_read(data_buff,buffer_u32)
        //temp queue up
        var out_buff = buffer_create(buffer_sizeof(buffer_u8)*5,buffer_fixed,1)
        buffer_write(out_buff,buffer_u8,msg_net.battle_find)
        repeat(4)
        buffer_write(out_buff,buffer_u8,1)
        network_send_packet(client,out_buff,buffer_sizeof(buffer_u8)*5)
        buffer_delete(out_buff)
        show_debug_message("sid recieved")
    break;
    case msg_net.battle_find:
        instance_create(0,0,oBattleController)
        for(var ii = 0; ii &lt; 2; ++ii)
        {
            if buffer_read(data_buff,buffer_u32) = sid
            {
                var t = oBattleController.team1
                var xx = 110 + (ii mod 2) * 50
            }
            else
            {
                var t = oBattleController.team2
                var xx = room_width - 110 - (ii mod 2) * 50
                if ii = 0
                    oBattleController.first_team = oBattleController.team2 
            }
            var y_section = room_height / 4
            for(var i = 0; i &lt; 4; ++i)
            {
                var man = instance_create(xx,y_section * i + 100,oBattleManster)
                with(man) ini_manster_base_stats(buffer_read(data_buff,buffer_u8))
                man.team = t
                ds_list_add(t,man)
            }  
        }          
    break;
    case msg_net.battle_turn:
        random_set_seed(buffer_read(data_buff,buffer_u8))
        repeat(2)
        {
            if buffer_read(data_buff,buffer_u32) = sid
            {
                var t = oBattleController.team1
            }
            else
            {
                var t = oBattleController.team2
            }
            for(var i = 0; i &lt; 4; ++i)
            {
                var selected_ability = buffer_read(data_buff,buffer_u16)
                var ability_map = script_execute(selected_ability,2);
                t[|i].selected_ability = selected_ability
                //show_debug_message(script_execute(selected_ability,1))
                ds_list_clear(t[|i].targets)
                repeat(ability_map[? "n"])
                {
                    var target_num = buffer_read(data_buff,buffer_u8)
                    if target_num &lt; 4
                    {
                        ds_list_add(t[|i].targets,t[|target_num])
                    }
                    else
                    {
                        if t = oBattleController.team1
                            var tt = oBattleController.team2
                        else
                            var tt = oBattleController.team1
                        ds_list_add(t[|i].targets,tt[|target_num-4])
                    }
                }
            } 
        }
        with(oBattleController) event_user(0)
    break;
    }
break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
